# Generated by Django 3.0.4 on 2020-03-27 07:43

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('entities', '0001_initial'),
        ('vocabs', '0001_initial'),
        ('idprovider', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='CardCollection',
            fields=[
                ('idprovider_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='idprovider.IdProvider')),
                ('name', models.CharField(blank=True, max_length=250, verbose_name='Name der Sammlung')),
                ('abbreviation', models.CharField(blank=True, max_length=25, verbose_name='Sammlungskürzel')),
                ('description', models.TextField(blank=True, verbose_name='Beschreibung')),
                ('part_of', models.ForeignKey(blank=True, help_text='Ist Teilsammlung von', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='has_parts', to='cards.CardCollection', verbose_name='Teilsammlung von')),
            ],
            bases=('idprovider.idprovider',),
        ),
        migrations.CreateModel(
            name='Card',
            fields=[
                ('idprovider_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='idprovider.IdProvider')),
                ('legacy_id', models.CharField(blank=True, max_length=250, null=True, verbose_name='Lfd. Nr.')),
                ('sort_id', models.IntegerField(blank=True, null=True, verbose_name='Chronologie')),
                ('number', models.CharField(blank=True, max_length=25, verbose_name='Nr (Serie)')),
                ('text_front', models.TextField(blank=True, verbose_name='Text Bildseite (Zitat)')),
                ('img_front', models.CharField(blank=True, max_length=250, verbose_name='Vorderseite')),
                ('text_back', models.TextField(blank=True, verbose_name='Text Rückseite')),
                ('img_back', models.CharField(blank=True, max_length=250, verbose_name='Rückseite')),
                ('gelaufen', models.CharField(blank=True, max_length=250, verbose_name='gelaufen')),
                ('note', models.TextField(blank=True, null=True, verbose_name='Formale Anmerkungen')),
                ('note_content', models.TextField(blank=True, null=True, verbose_name='Inhaltliche Anmerkungen')),
                ('signature', models.TextField(blank=True, help_text='(Archiv)Signatur', verbose_name='(Archiv)Signatur')),
                ('written_date', models.CharField(blank=True, help_text='Datum original', max_length=250, verbose_name='Datum original')),
                ('not_before', models.DateField(blank=True, help_text='YYYY-MM-DD', null=True, verbose_name='Nicht vor normalisiert')),
                ('not_after', models.DateField(blank=True, help_text='YYYY-MM-DD', null=True, verbose_name='Nicht nach normalisiert')),
                ('public', models.BooleanField(default=False)),
                ('archiv', models.ForeignKey(blank=True, help_text='Archiv in dem das Dokument aufbewahrt wird', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='has_docs_archived', to='entities.Institution', verbose_name='Archiv')),
                ('bild_technik', models.ManyToManyField(blank=True, help_text='Bildtechnik', related_name='bildtechnik_of', to='vocabs.SkosConcept', verbose_name='Bildtechnik')),
                ('card_collection', models.ForeignKey(blank=True, help_text='some helptext', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='contain_cards', to='cards.CardCollection', verbose_name='Serie')),
                ('creator_inst', models.ManyToManyField(blank=True, help_text='Erzeuger des Dokuments(Institution)', related_name='created_by_inst', to='entities.Institution', verbose_name='Erzeuger des Dokuments(Institution)')),
                ('creator_person', models.ManyToManyField(blank=True, help_text='Erzeuger des Dokuments', related_name='created_by_person', to='entities.Person', verbose_name='Erzeuger des Dokuments(Person)')),
                ('mentioned_inst', models.ManyToManyField(blank=True, help_text='Im Dokument erwähnte Institution', related_name='inst_mentioned_in_res', to='entities.Institution', verbose_name='Im Dokument erwähnte Institution')),
                ('mentioned_person', models.ManyToManyField(blank=True, help_text='Im Dokument erwähnte Person', related_name='pers_mentioned_in_res', to='entities.Person', verbose_name='Im Dokument erwähnte Person')),
                ('mentioned_place', models.ManyToManyField(blank=True, help_text='Im Dokument erwähnte Orte', related_name='place_mentioned_in_res', to='entities.Place', verbose_name='Im Dokument erwähnte Orte')),
                ('subject_norm', models.ManyToManyField(blank=True, help_text='Schlagwörter normalisiert', related_name='subject_norm_of', to='vocabs.SkosConcept', verbose_name='Schlagwörter normalisiert')),
            ],
            bases=('idprovider.idprovider',),
        ),
    ]
